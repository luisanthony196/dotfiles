#!/bin/python

import os
import argparse
import glob
import re
import xml.etree.ElementTree as ET


def verify_project():
    """[Comp] Verificacion de proyecto Dotnet"""
    csproj_file = [f for f in os.listdir() if f.endswith(".csproj")]

    if not csproj_file:
        print("No existe el archivo .csproj")
        exit()

    global csproj
    csproj = csproj_file[0][:-7]


def menu(list):
	print("Elige una opcion:")
	for i in range(0, len(list)):
		print(f"{i + 1}. {list[i]}")
	print("0. Ninguna")
	r = int(input("Respuesta: "))
	return r if r > 0 else None


def verify_directory(route):
    directory = os.path.join(route)
    if not os.path.exists(directory):
        os.makedirs(directory)
    return directory


def procces_namespace(route):
    result = route.strip("./").split("/")
    if len(result[0]) == 0:
        return f'namespace {csproj};'
    return f'namespace {csproj}.{".".join(result)};'


def create_file(name, content):
    if os.path.exists(name):
        print("El archivo ya existe")
        exit()

    with open(name, "w") as file:
        file.write(content)
    print(f"Se ha creado el archivo {name}")


def create_model(indI, incl):
    dir = args.PATH or "Models"
    directory = verify_directory(dir)
    namespace = procces_namespace(dir)
    content = f"{namespace}\n\npublic {incl} {indI}{args.FILE}\n{{\n}}"
    create_file(os.path.join(directory, f"{indI}{args.FILE}.cs"), content)


def create_service(indI, incl):
    dir = args.PATH or "Services"
    directory = verify_directory(dir)
    namespace = procces_namespace(dir)
    content = f"{namespace}\n\npublic {incl} {indI}{args.FILE}Service\n{{\n}}"
    create_file(os.path.join(directory, f"{indI}{args.FILE}Service.cs"), content)


def create_controllder():
    dir = args.PATH or "Controllers"
    directory = verify_directory(dir)
    namespace = procces_namespace(dir)
    content = 'using Microsoft.AspNetCore.Mvc;\n\n' \
        f'{namespace}\n\n' \
        '[Route("api/[controller]")]\n' \
        '[ApiController]\n' \
        f'public class {args.FILE}Controller : ControllerBase\n{{\n}}'
    create_file(os.path.join(directory, f"{args.FILE}Controller.cs"), content)


def create_test(indI, incl):
    dir = args.PATH or "."
    directory = verify_directory(dir)
    namespace = procces_namespace(dir)
    content = f"{namespace}\n\npublic {incl} {indI}{args.FILE}Test\n{{\n}}"
    create_file(os.path.join(directory, f"{indI}{args.FILE}Test.cs"), content)


def create_class(indI, incl):
    dir = args.PATH or "."
    directory = verify_directory(dir)
    namespace = procces_namespace(dir)
    content = f"{namespace}\n\npublic {incl} {indI}{args.FILE}\n{{\n}}"
    create_file(os.path.join(directory, f"{indI}{args.FILE}.cs"), content)

def create_dto():
    # Todo: esta funcion si o si crea el base al no enviar una ruta
    dir = args.PATH or f"Dtos/{args.FILE}"
    directory = verify_directory(dir)
    namespace = procces_namespace(dir)
    if (args.PATH):
        dto_name = re.match(r'Dtos\/(\w+)', args.PATH).group(1)
        with open(f'Dtos/{dto_name}/{dto_name}Dto.cs') as file:
            content = file.read()
        section = content[content.index('{') + 1:content.rindex('}')]
        content = f"{namespace}\n\npublic class {args.FILE}Dto\n{{{section}}}"
    else:
        content = f"{namespace}\n\npublic class {args.FILE}Dto\n{{\n}}"
    create_file(os.path.join(directory, f"{args.FILE}Dto.cs"), content)


def new_file():
    indI = 'I' if args.interface else ''
    incl = 'interface' if args.interface else 'class'

    if args.model:
	    create_model(indI, incl)
    elif args.controller:
        create_controllder()
    elif args.service:
        create_service(indI, incl)
    elif args.test:
        create_test(indI, incl)
    elif args.dto:
        create_dto()
    else:
        create_class(indI, incl)


def conf_ref():
	tree = ET.parse(f'{csproj}.csproj')
	root = tree.getroot()

	if args.add:
		proj_list = glob.glob('../*/*.csproj')
		dir = os.getcwd().split('/')[-1]
		proj_list.remove(f"../{dir}/{csproj}.csproj")
		r = menu(proj_list)
		if r is not None:
			os.system(f"dotnet add reference {proj_list[r]}")
	elif args.remove:
		search = root.findall('./ItemGroup/ProjectReference')
		dep_list = [item.attrib['Include'] for item in list(search)]
		r = menu(dep_list)
		if r is not None:
			os.system(f"dotnet remove reference {dep_list[r].replace('\\', '/')}")
	else:
		os.system("dotnet list reference")


def cli():
    """CLI basica con argparse"""
    verify_project()
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    # Argumento para crear archivos
    par_new = subparsers.add_parser('new', help="Create new file")
    par_new.add_argument('FILE', help='Nombre de la clase')
    par_new.add_argument('-i', '--interface', action='store_true')
    par_new.add_argument('PATH', nargs='?', help='Ubicacion de la carpeta')
    # Elegir que tipo de archivo necesita
    grp_new = par_new.add_mutually_exclusive_group()
    grp_new.add_argument('-m', '--model', action='store_true')
    grp_new.add_argument('-s', '--service', action='store_true')
    grp_new.add_argument('-c', '--controller', action='store_true')
    grp_new.add_argument('-t', '--test', action='store_true')
    grp_new.add_argument('-d', '--dto', action='store_true')
    par_new.set_defaults(func=new_file)
    # Argumento para manejar referencias
    par_ref = subparsers.add_parser('ref', help="ref help")
    par_ref.add_argument('PATH', nargs='?', help='Ubicacion de la carpeta')
    par_ref.add_argument('-a', '--add', action='store_true')
    par_ref.add_argument('-l', '--list', action='store_true')
    par_ref.add_argument('-r', '--remove', action='store_true')
    par_ref.set_defaults(func=conf_ref)
    # Almacena los argumentos
    cli_args = parser.parse_args()
    # Ejecuta la funcion o muestra ayuda
    if len(vars(cli_args)) == 0:
        parser.print_help()
    else:
        global args
        args = cli_args
        cli_args.func()


if __name__ == "__main__":
    cli()
